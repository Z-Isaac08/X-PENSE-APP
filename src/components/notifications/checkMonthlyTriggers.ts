import { type ExpenseInterface } from "../../stores/expenseStore";
import { type IncomeInterface } from "../../stores/incomeStore";
import { useNotificationStore } from "../../stores/notificationStore";
import { useBudgetStore } from "../../stores/budgetStore";
import { formatCurrency } from "../../utils";
import { calculateTrackingTrend } from "../../utils/budgetTrends";

export const checkMonthlyTriggers = async (
  userId: string,
  expenses: ExpenseInterface[],
  incomes: IncomeInterface[]
) => {
  const { addNotifications } = useNotificationStore.getState();
  const { budgets } = useBudgetStore.getState();

  const now = new Date();
  const month = now.getMonth();
  const year = now.getFullYear();
  const day = now.getDate();
  const lastDayOfMonth = new Date(year, month + 1, 0).getDate();

  // Filtrage des donn√©es du mois courant
  const currentMonthExpenses = expenses.filter((e) => {
    const d = new Date(e.date);
    console.log(d);
    return d.getMonth() === month && d.getFullYear() === year;
  });
  const currentMonthIncomes = incomes.filter((i) => {
    const d = new Date(i.date);
    return d.getMonth() === month && d.getFullYear() === year;
  });

  const totalExpenses = currentMonthExpenses.reduce(
    (sum, e) => sum + e.amount,
    0
  );
  const totalIncomes = currentMonthIncomes.reduce(
    (sum, i) => sum + i.amount,
    0
  );

  // R√©sum√© mensuel interm√©diaire (le 15, seulement si activit√©)
  if (day === 15 && (totalExpenses > 0 || totalIncomes > 0)) {
    const monthName = now.toLocaleString("fr-FR", { month: "long" });
    const balance = totalIncomes - totalExpenses;
    const midSummary = `üìä R√©sum√© mi-${monthName}: ${formatCurrency(totalExpenses)} de d√©penses, ${formatCurrency(totalIncomes)} de revenus. Solde: ${formatCurrency(balance)} ${balance >= 0 ? '‚úÖ' : '‚ö†Ô∏è'}`;

    await addNotifications(userId, {
      message: midSummary,
      type: "alert",
      date: now.toISOString(),
      read: false,
    });
  }

  // Rappel d‚Äôinactivit√© (le 15)
  if (day === 15 && totalIncomes === 0 && totalExpenses === 0) {
    const midMonthReminder = `Aucune activit√© d√©tect√©e ce mois-ci. N‚Äôoubliez pas de saisir vos revenus ou d√©penses.`;
    await addNotifications(userId, {
      message: midMonthReminder,
      type: "alert",
      date: now.toISOString(),
      read: false,
    });
  }

  // R√©sum√© mensuel final (dernier jour du mois)
  if (day === lastDayOfMonth) {
    const finalSummary = `R√©sum√© final de ${now.toLocaleString("fr-FR", {
      month: "long",
    })} : ${totalExpenses.toLocaleString()} FCFA de d√©penses, ${totalIncomes.toLocaleString()} FCFA de revenus.`;

    await addNotifications(userId, {
      message: finalSummary,
      type: "alert",
      date: now.toISOString(),
      read: false,
    });

    // R√©sum√© par type de budget
    const cappedBudgets = budgets.filter(b => b.type === 'capped');
    const trackingBudgets = budgets.filter(b => b.type === 'tracking');

    // R√©sum√© budgets plafonn√©s
    if (cappedBudgets.length > 0) {
      const budgetSummary = cappedBudgets.map(budget => {
        const spent = currentMonthExpenses
          .filter(e => e.budget === budget.id)
          .reduce((sum, e) => sum + e.amount, 0);
        const percentage = budget.amount ? (spent / budget.amount) * 100 : 0;
        const status = percentage > 100 ? '‚ö†Ô∏è D√©pass√©' : percentage > 90 ? '‚ö†Ô∏è Limite proche' : '‚úÖ Respect√©';
        return `${budget.name}: ${status}`;
      }).join(', ');

      await addNotifications(userId, {
        message: `üìä Budgets plafonn√©s - ${budgetSummary}`,
        type: "alert",
        date: now.toISOString(),
        read: false,
      });
    }

    // R√©sum√© cat√©gories de suivi avec tendances
    if (trackingBudgets.length > 0) {
      trackingBudgets.forEach(async (budget) => {
        const trend = calculateTrackingTrend(budget.id, expenses);
        if (trend.currentMonth > 0) {
          const trendText = trend.trend === 'up' ? 'üìà en hausse' : 
                           trend.trend === 'down' ? 'üìâ en baisse' : 
                           '‚û°Ô∏è stable';
          await addNotifications(userId, {
            message: `üìù ${budget.name}: ${trend.currentMonth.toLocaleString()} FCFA ce mois (${trendText})`,
            type: "expense",
            date: now.toISOString(),
            read: false,
          });
        }
      });
    }

    // Notif rapport disponible
    const reportMessage = `Votre rapport PDF pour ${now.toLocaleString(
      "fr-FR",
      {
        month: "long",
      }
    )} est disponible dans le tableau de bord.`;
    await addNotifications(userId, {
      message: reportMessage,
      type: "alert",
      date: now.toISOString(),
      read: false,
    });
  }

  // Cat√©gorie dominante (le 20)
  const categories: Record<string, number> = {};
  currentMonthExpenses.forEach((e) => {
    categories[e.name] = (categories[e.name] || 0) + e.amount;
  });
  const topCategory = Object.entries(categories).sort((a, b) => b[1] - a[1])[0];

  if (day === 20 && topCategory) {
    const categoryMessage = `Vous avez principalement d√©pens√© dans ${topCategory[0]} ce mois-ci.`;
    await addNotifications(userId, {
      message: categoryMessage,
      type: "expense",
      date: now.toISOString(),
      read: false,
    });
  }

  // Rappel le 1er si aucun revenu
  if (day === 1 && totalIncomes === 0) {
    const reminderMessage = `N‚Äôoubliez pas d‚Äôajouter vos revenus mensuels pour ${now.toLocaleString(
      "fr-FR",
      { month: "long" }
    )}.`;
    await addNotifications(userId, {
      message: reminderMessage,
      type: "income",
      date: now.toISOString(),
      read: false,
    });
  }

  // Rappel le 1er si aucune d√©pense
  if (day === 1 && totalExpenses === 0) {
    const reminderMessage = `N‚Äôoubliez pas d‚Äôajouter vos d√©penses tout au long du mois de ${now.toLocaleString(
      "fr-FR",
      { month: "long" }
    )}.`;
    await addNotifications(userId, {
      message: reminderMessage,
      type: "expense",
      date: now.toISOString(),
      read: false,
    });
  }
};
